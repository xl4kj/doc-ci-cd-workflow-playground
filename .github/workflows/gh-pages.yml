name: gh-pages

on:
  push:
    branches: ["*"]
    paths-ignore:
      - README.md
      - CONTRIBUTING.md
      - LICENSE.md
      - .gitignore
  pull_request:
    branches: ["*"]
    paths-ignore:
      - README.md
      - CONTRIBUTING.md
      - LICENSE.md
      - .gitignore
  release:
    types:
      - created
      - edited

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified

      - name: Install deps
        run: |-
          python -m pip install -r requirements-dev.txt

      - name: Build branch
        id: build-branches
        run: |-
        
          # Debug information
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub head ref: $GITHUB_HEAD_REF"
          echo "GitHub ref type: $GITHUB_REF_TYPE"
          echo "Event name: ${{ github.event_name }}"
          
          # Determine path for content
          if [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
            # For tags, extract the version number and create a versioned folder
            TAG=${GITHUB_REF#refs/}
            SUBPATH="${TAG}" # e.g. tags/v1.0.0
            echo "This is a tag build: $TAG"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, use the PR number
            PR_NUMBER="${{ github.event.pull_request.number }}"
            SUBPATH="prs/pr-${PR_NUMBER}" # e.g. prs/pr-53
            echo "This is a PR build: $PR_NUMBER"
          else
            # For branch pushes, use the branch name
            BRANCH=${GITHUB_REF#refs/heads/}
            SUBPATH="${BRANCH}" # e.g. versione-corrente, warning-removal
            echo "This is a branch build: $BRANCH"
          fi
          
          echo "Publishing $SUBPATH"
          
          # Create output directories
          mkdir -p "html/${SUBPATH}/it"
          mkdir -p "html/${SUBPATH}/en"

          echo "Publishing html/$SUBPATH/it"
          echo "Publishing html/$SUBPATH/en"

          sphinx-build -b html docs/it/ html/$SUBPATH/it
          sphinx-build -b html docs/en/ html/$SUBPATH/en
          
          # Create index file in this version's directory
          echo "
          <html>
          <head>
            <title>IT-Wallet System Technical Specifications - ($SUBPATH)</title>
            <meta name="viewport" content="initial-scale=1.0">
            <style>
              body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #333; }
              h2 { color: #555; margin-top: 30px; }
              ul { list-style-type: none; padding: 0; }
              li { margin-bottom: 10px; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
              .version { font-weight: bold; }
            </style>
          </head>
          <body>
          <h1>IT-Wallet System Technical Specifications - ${SUBPATH%/}</h1>
          
          <ul>
            <li><a href=\"it/\">Italian version</a></li>
            <li><a href=\"en/\">English version</a></li>
          </ul>
          </body>
          </html>
          " > "html/${SUBPATH}/index.html"

      - name: Checkout gh-pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages-content
          
      - name: Generate main index.html with all versions
        run: |-
          # Create a script to find all index.html files except those in en/ or it/ directories
          cat > find_index_files.sh << 'EOF'
          #!/bin/bash
          
          # Directory to search
          search_dir="$1"
          
          # Find all index.html files
          all_files=$(find "$search_dir" -type f -name "index.html")
          
          # Filter out files in en/ and it/ directories
          filtered_files=$(echo "$all_files" | grep -v "en/index.html" | grep -v "it/index.html")
          
          # Output the filtered list
          echo "$filtered_files"
          EOF
          
          # Make the script executable
          chmod +x find_index_files.sh
          
          # Run the script to find all relevant index.html files
          index_files=$(./find_index_files.sh gh-pages-content)
          
          # Create a main index.html file with links to all versions
          cat > gh-pages-content/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>IT-Wallet System Technical Specifications - All Versions</title>
            <meta name="viewport" content="initial-scale=1.0">
            <style>
              body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #333; }
              h2 { color: #555; margin-top: 30px; }
              ul { list-style-type: none; padding: 0; }
              li { margin-bottom: 10px; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
              .version { font-weight: bold; }
              .version-container { margin-bottom: 20px; padding: 10px; border-bottom: 1px solid #eee; }
            </style>
          </head>
          <body>
            <h1>IT-Wallet System Technical Specifications</h1>
            <h2>Available Versions</h2>
            <div id="versions-list">
          EOF
          
          # Process each index.html file and add a link to the main index
          for file in $index_files; do
            # Extract the relative path by removing gh-pages-content/ prefix
            rel_path=${file#gh-pages-content/}
            # Get the directory containing this index.html
            dir_path=$(dirname "$rel_path")
            
            # Skip the root index.html (which is the one we're creating)
            if [ "$dir_path" = "." ]; then
              continue
            fi
            
            # Add a link to this version in the main index.html
            echo "    <div class=\"version-container\">" >> gh-pages-content/index.html
            echo "      <div class=\"version\"><a href=\"${dir_path}/\">${dir_path}</a></div>" >> gh-pages-content/index.html
            echo "      <ul>" >> gh-pages-content/index.html
            echo "        <li><a href=\"${dir_path}/it/\">Italian version</a></li>" >> gh-pages-content/index.html
            echo "        <li><a href=\"${dir_path}/en/\">English version</a></li>" >> gh-pages-content/index.html
            echo "      </ul>" >> gh-pages-content/index.html
            echo "    </div>" >> gh-pages-content/index.html
          done
          
          # Complete the HTML file
          cat >> gh-pages-content/index.html << 'EOF'
            </div>
            <p><em>Last updated: $(date)</em></p>
          </body>
          </html>
          EOF
          
          # Copy the generated index.html to the deployment directory
          cp gh-pages-content/index.html html/index.html
          
          echo "XXXXX"
          cat html/index.html
          
      - name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: html
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
